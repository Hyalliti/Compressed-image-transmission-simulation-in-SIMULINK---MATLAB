%% PASO 0 : Se importa la imagen
figure('Name','Imagen Original de Boca Chica')
imagen_bocachica = imread('boca_chica.jpg');
imshow(imagen_bocachica)
title('Imagen Original de Boca Chica')


imagen_bocachica2 = double(imagen_bocachica);
clearvars imagen_bocachica4 imagen_bocachicaB imagen_bocachicaG imagen_bocachicaR
LAT = size(imagen_bocachica,1)
LONG = size(imagen_bocachica,2)
HOR = size(imagen_bocachica,1)*size(imagen_bocachica,2)
imagen_bocachica3 = reshape(imagen_bocachica2 ,HOR,3);
%% PASO 1: Decomposición de la imagen porque son muchos colores:

ZR = imagen_bocachica2(:,:,1);
ZG = imagen_bocachica2(:,:,2);
ZB = imagen_bocachica2(:,:,3);

% Los EigenValues están limitados por el numero de filas.
[UR,SR,VR]=svd(ZR); 
[UG,SG,VG]=svd(ZG); 
[UB,SB,VB]=svd(ZB); 

% Se modifica el codigo inicial sabiendo que se aprovecharán todas las
% filas siempre y cuando se determine una cifra M que eventualmente
% representará el porcentaje de elementos de la matriz original que serán
% correspondidos. Como la matriz no es cuadrada el máximo es 515.
%%  PASO 2: Vectores de Valores Propios y Cantidades Totales
Suma_total2R = sum(sum(SR));
Suma_total2G = sum(sum(SG));
Suma_total2B = sum(sum(SB));

% La posicion será el final de el vector incial menos el indice
% correspondiente al elemento. Osea que si el elemento es el primero, su
% posicion será end-1, end-2 al segundo elemento etc.
VER_RED = reshape(SR,1,size(SR,1)*size(SR,2)) ;
VER_RED = unique(VER_RED); 
VER_RED2 = VER_RED;
for i = 1:length(VER_RED2)
    VER_RED(i) = VER_RED2(end+1-i);   
end
VER_RED = VER_RED(1:end-1);

% VERDE
VER_GREEN = reshape(SG,1,size(SG,1)*size(SG,2)) ;
VER_GREEN = unique(VER_GREEN); 
VER_GREEN2 = VER_GREEN;
for i = 1:length(VER_GREEN2)
    VER_GREEN(i) = VER_GREEN2(end+1-i);   
end
VER_GREEN = VER_GREEN(1:end-1);

% AZUL
VER_BLUE = reshape(SB,1,size(SB,1)*size(SB,2)) ;
VER_BLUE = unique(VER_BLUE); 
VER_BLUE2 = VER_BLUE;
for i = 1:length(VER_BLUE2)
    VER_BLUE(i) = VER_BLUE2(end+1-i);   
end
VER_BLUE = VER_BLUE(1:end-1);
%%   PASO 3: Calculo Para Porcentajes
% Porcentaje de 25%
P1 = 25/100; 
for i = 1:length(VER_RED)
    if sum(VER_RED(1:i)) <= round(P1*Suma_total2R) & sum(VER_RED(1:i+1)) > round((P1)*Suma_total2R) 
         j = i;
    else 
        i = i+1;
    end
end
M1R= j  ;clearvars i j;

for i = 1:length(VER_GREEN)
    if sum(VER_GREEN(1:i)) <= round(P1*Suma_total2G) & sum(VER_GREEN(1:i+1)) > round((P1)*Suma_total2G) 
         j = i;
    else 
        i = i+1;
    end
end
M1G = j;clearvars i j;

for i = 1:length(VER_BLUE)
    if sum(VER_BLUE(1:i)) <= round(P1*Suma_total2B) & sum(VER_BLUE(1:i+1)) > round((P1)*Suma_total2B) 
         j = i;
    else 
        i = i+1;
    end
end
M1B = j;clearvars i j;
% Porcentaje 65%
P2 = 65/100;
for i = 1:length(VER_RED)
    if sum(VER_RED(1:i)) <= round(P2*Suma_total2R) & sum(VER_RED(1:i+1)) > round((P2)*Suma_total2R) 
         j = i;
    else 
        i = i+1;
    end
end
M2R = j;clearvars i j;

for i = 1:length(VER_GREEN)
    if sum(VER_GREEN(1:i)) <= round(P2*Suma_total2G) & sum(VER_GREEN(1:i+1)) > round((P2)*Suma_total2G) 
         j = i;
    else 
        i = i+1;
    end
end
M2G = j;clearvars i j;

for i = 1:length(VER_BLUE)
    if sum(VER_BLUE(1:i)) <= round(P2*Suma_total2B) & sum(VER_BLUE(1:i+1)) > round((P2)*Suma_total2B) 
         j = i;
    else 
        i = i+1;
    end
end
M2B = j;clearvars i j;
% Porcentaje 85%
P3 = 85/100;
for i = 1:length(VER_RED)
    if sum(VER_RED(1:i)) <= round(P3*Suma_total2R) & sum(VER_RED(1:i+1)) > round((P3)*Suma_total2R) 
         j = i;
    else 
        i = i+1;
    end
end
M3R = j ;clearvars i j;

for i = 1:length(VER_GREEN)
    if sum(VER_GREEN(1:i)) <= round(P3*Suma_total2G) & sum(VER_GREEN(1:i+1)) > round((P3)*Suma_total2G) 
         j = i;
    else 
        i = i+1;
    end
end
M3G = j;clearvars i j;

for i = 1:length(VER_BLUE)
    if sum(VER_BLUE(1:i)) <= round(P3*Suma_total2B) & sum(VER_BLUE(1:i+1)) > round((P3)*Suma_total2B) 
         j = i;
    else 
        i = i+1;
    end
end
M3B = j;clearvars i j;
%%     PASO 4: Elegir los Single Values que acumulen el 65% de la Suma Total
UhR=UR(:,[1:M2R]);
ShR=SR(1:M2R,1:M2R);
VhR=VR(:,[1:M2R]); 
 
UhG=UG(:,[1:M2G]);
ShG=SG(1:M2G,1:M2G);
VhG=VG(:,[1:M2G]);
 
UhB=UG(:,[1:M2B]);
ShB=SG(1:M2B,1:M2B);
VhB=VG(:,[1:M2B]); 

CR=UhR*ShR*VhR';
CG=UhG*ShG*VhG';
CB=UhB*ShB*VhB';
Crgb2 = cat(3,CR,CG,CB);
figure('Name','Imagen Comprimida que acumula el 65% de la información Original')
imshow(uint8(Crgb2))
title('Imagen Comprimida en un 35%')
clearvars Crgb;

%% PASO 5: Imagen comprimida en un 35% 
Crgb2;
% Primera Capa de Color
% R es la capa roja de la imagen
imagen_bocachicaR = round(reshape(Crgb2(:,:,1) ,HOR,1)) ;
% G y B corresponden a verde y azul respectivamente
imagen_bocachicaG = round(reshape(Crgb2(:,:,2) ,HOR,1)) ;
imagen_bocachicaB = round(reshape(Crgb2(:,:,3) ,HOR,1)) ;
%% *************************************************************************************************************************************
%% BLOQUE DE CUANTIZACION
%% INICALIZACION DE TABLA
%% TODOS LOS 8 BITS tipo 3
 Todos_los_8bits_tipo3 = ([[0;0;0;0;0;0;0;0],[...
0;0;0;0;0;0;0;1],[...
0;0;0;0;0;0;1;0],[...
0;0;0;0;0;0;1;1],[...
0;0;0;0;0;1;0;0],[...
0;0;0;0;0;1;0;1],[...
0;0;0;0;0;1;1;0],[...
0;0;0;0;0;1;1;1],[...
0;0;0;0;1;0;0;0],[...
0;0;0;0;1;0;0;1],[...
0;0;0;0;1;0;1;0],[...
0;0;0;0;1;0;1;1],[...
0;0;0;0;1;1;0;0],[...
0;0;0;0;1;1;0;1],[...
0;0;0;0;1;1;1;0],[...
0;0;0;0;1;1;1;1],[...
0;0;0;1;0;0;0;0],[...
0;0;0;1;0;0;0;1],[...
0;0;0;1;0;0;1;0],[...
0;0;0;1;0;0;1;1],[...
0;0;0;1;0;1;0;0],[...
0;0;0;1;0;1;0;1],[...
0;0;0;1;0;1;1;0],[...
0;0;0;1;0;1;1;1],[...
0;0;0;1;1;0;0;0],[...
0;0;0;1;1;0;0;1],[...
0;0;0;1;1;0;1;0],[...
0;0;0;1;1;0;1;1],[...
0;0;0;1;1;1;0;0],[...
0;0;0;1;1;1;0;1],[...
0;0;0;1;1;1;1;0],[...
0;0;0;1;1;1;1;1],[...
0;0;1;0;0;0;0;0],[...
0;0;1;0;0;0;0;1],[...
0;0;1;0;0;0;1;0],[...
0;0;1;0;0;0;1;1],[...
0;0;1;0;0;1;0;0],[...
0;0;1;0;0;1;0;1],[...
0;0;1;0;0;1;1;0],[...
0;0;1;0;0;1;1;1],[...
0;0;1;0;1;0;0;0],[...
0;0;1;0;1;0;0;1],[...
0;0;1;0;1;0;1;0],[...
0;0;1;0;1;0;1;1],[...
0;0;1;0;1;1;0;0],[...
0;0;1;0;1;1;0;1],[...
0;0;1;0;1;1;1;0],[...
0;0;1;0;1;1;1;1],[...
0;0;1;1;0;0;0;0],[...
0;0;1;1;0;0;0;1],[...
0;0;1;1;0;0;1;0],[...
0;0;1;1;0;0;1;1],[...
0;0;1;1;0;1;0;0],[...
0;0;1;1;0;1;0;1],[...
0;0;1;1;0;1;1;0],[...
0;0;1;1;0;1;1;1],[...
0;0;1;1;1;0;0;0],[...
0;0;1;1;1;0;0;1],[...
0;0;1;1;1;0;1;0],[...
0;0;1;1;1;0;1;1],[...
0;0;1;1;1;1;0;0],[...
0;0;1;1;1;1;0;1],[...
0;0;1;1;1;1;1;0],[...
0;0;1;1;1;1;1;1],[...
0;1;0;0;0;0;0;0],[...
0;1;0;0;0;0;0;1],[...
0;1;0;0;0;0;1;0],[...
0;1;0;0;0;0;1;1],[...
0;1;0;0;0;1;0;0],[...
0;1;0;0;0;1;0;1],[...
0;1;0;0;0;1;1;0],[...
0;1;0;0;0;1;1;1],[...
0;1;0;0;1;0;0;0],[...
0;1;0;0;1;0;0;1],[...
0;1;0;0;1;0;1;0],[...
0;1;0;0;1;0;1;1],[...
0;1;0;0;1;1;0;0],[...
0;1;0;0;1;1;0;1],[...
0;1;0;0;1;1;1;0],[...
0;1;0;0;1;1;1;1],[...
0;1;0;1;0;0;0;0],[...
0;1;0;1;0;0;0;1],[...
0;1;0;1;0;0;1;0],[...
0;1;0;1;0;0;1;1],[...
0;1;0;1;0;1;0;0],[...
0;1;0;1;0;1;0;1],[...
0;1;0;1;0;1;1;0],[...
0;1;0;1;0;1;1;1],[...
0;1;0;1;1;0;0;0],[...
0;1;0;1;1;0;0;1],[...
0;1;0;1;1;0;1;0],[...
0;1;0;1;1;0;1;1],[...
0;1;0;1;1;1;0;0],[...
0;1;0;1;1;1;0;1],[...
0;1;0;1;1;1;1;0],[...
0;1;0;1;1;1;1;1],[...
0;1;1;0;0;0;0;0],[...
0;1;1;0;0;0;0;1],[...
0;1;1;0;0;0;1;0],[...
0;1;1;0;0;0;1;1],[...
0;1;1;0;0;1;0;0],[...
0;1;1;0;0;1;0;1],[...
0;1;1;0;0;1;1;0],[...
0;1;1;0;0;1;1;1],[...
0;1;1;0;1;0;0;0],[...
0;1;1;0;1;0;0;1],[...
0;1;1;0;1;0;1;0],[...
0;1;1;0;1;0;1;1],[...
0;1;1;0;1;1;0;0],[...
0;1;1;0;1;1;0;1],[...
0;1;1;0;1;1;1;0],[...
0;1;1;0;1;1;1;1],[...
0;1;1;1;0;0;0;0],[...
0;1;1;1;0;0;0;1],[...
0;1;1;1;0;0;1;0],[...
0;1;1;1;0;0;1;1],[...
0;1;1;1;0;1;0;0],[...
0;1;1;1;0;1;0;1],[...
0;1;1;1;0;1;1;0],[...
0;1;1;1;0;1;1;1],[...
0;1;1;1;1;0;0;0],[...
0;1;1;1;1;0;0;1],[...
0;1;1;1;1;0;1;0],[...
0;1;1;1;1;0;1;1],[...
0;1;1;1;1;1;0;0],[...
0;1;1;1;1;1;0;1],[...
0;1;1;1;1;1;1;0],[...
0;1;1;1;1;1;1;1],[...
1;0;0;0;0;0;0;0],[...
1;0;0;0;0;0;0;1],[...
1;0;0;0;0;0;1;0],[...
1;0;0;0;0;0;1;1],[...
1;0;0;0;0;1;0;0],[...
1;0;0;0;0;1;0;1],[...
1;0;0;0;0;1;1;0],[...
1;0;0;0;0;1;1;1],[...
1;0;0;0;1;0;0;0],[...
1;0;0;0;1;0;0;1],[...
1;0;0;0;1;0;1;0],[...
1;0;0;0;1;0;1;1],[...
1;0;0;0;1;1;0;0],[...
1;0;0;0;1;1;0;1],[...
1;0;0;0;1;1;1;0],[...
1;0;0;0;1;1;1;1],[...
1;0;0;1;0;0;0;0],[...
1;0;0;1;0;0;0;1],[...
1;0;0;1;0;0;1;0],[...
1;0;0;1;0;0;1;1],[...
1;0;0;1;0;1;0;0],[...
1;0;0;1;0;1;0;1],[...
1;0;0;1;0;1;1;0],[...
1;0;0;1;0;1;1;1],[...
1;0;0;1;1;0;0;0],[...
1;0;0;1;1;0;0;1],[...
1;0;0;1;1;0;1;0],[...
1;0;0;1;1;0;1;1],[...
1;0;0;1;1;1;0;0],[...
1;0;0;1;1;1;0;1],[...
1;0;0;1;1;1;1;0],[...
1;0;0;1;1;1;1;1],[...
1;0;1;0;0;0;0;0],[...
1;0;1;0;0;0;0;1],[...
1;0;1;0;0;0;1;0],[...
1;0;1;0;0;0;1;1],[...
1;0;1;0;0;1;0;0],[...
1;0;1;0;0;1;0;1],[...
1;0;1;0;0;1;1;0],[...
1;0;1;0;0;1;1;1],[...
1;0;1;0;1;0;0;0],[...
1;0;1;0;1;0;0;1],[...
1;0;1;0;1;0;1;0],[...
1;0;1;0;1;0;1;1],[...
1;0;1;0;1;1;0;0],[...
1;0;1;0;1;1;0;1],[...
1;0;1;0;1;1;1;0],[...
1;0;1;0;1;1;1;1],[...
1;0;1;1;0;0;0;0],[...
1;0;1;1;0;0;0;1],[...
1;0;1;1;0;0;1;0],[...
1;0;1;1;0;0;1;1],[...
1;0;1;1;0;1;0;0],[...
1;0;1;1;0;1;0;1],[...
1;0;1;1;0;1;1;0],[...
1;0;1;1;0;1;1;1],[...
1;0;1;1;1;0;0;0],[...
1;0;1;1;1;0;0;1],[...
1;0;1;1;1;0;1;0],[...
1;0;1;1;1;0;1;1],[...
1;0;1;1;1;1;0;0],[...
1;0;1;1;1;1;0;1],[...
1;0;1;1;1;1;1;0],[...
1;0;1;1;1;1;1;1],[...
1;1;0;0;0;0;0;0],[...
1;1;0;0;0;0;0;1],[...
1;1;0;0;0;0;1;0],[...
1;1;0;0;0;0;1;1],[...
1;1;0;0;0;1;0;0],[...
1;1;0;0;0;1;0;1],[...
1;1;0;0;0;1;1;0],[...
1;1;0;0;0;1;1;1],[...
1;1;0;0;1;0;0;0],[...
1;1;0;0;1;0;0;1],[...
1;1;0;0;1;0;1;0],[...
1;1;0;0;1;0;1;1],[...
1;1;0;0;1;1;0;0],[...
1;1;0;0;1;1;0;1],[...
1;1;0;0;1;1;1;0],[...
1;1;0;0;1;1;1;1],[...
1;1;0;1;0;0;0;0],[...
1;1;0;1;0;0;0;1],[...
1;1;0;1;0;0;1;0],[...
1;1;0;1;0;0;1;1],[...
1;1;0;1;0;1;0;0],[...
1;1;0;1;0;1;0;1],[...
1;1;0;1;0;1;1;0],[...
1;1;0;1;0;1;1;1],[...
1;1;0;1;1;0;0;0],[...
1;1;0;1;1;0;0;1],[...
1;1;0;1;1;0;1;0],[...
1;1;0;1;1;0;1;1],[...
1;1;0;1;1;1;0;0],[...
1;1;0;1;1;1;0;1],[...
1;1;0;1;1;1;1;0],[...
1;1;0;1;1;1;1;1],[...
1;1;1;0;0;0;0;0],[...
1;1;1;0;0;0;0;1],[...
1;1;1;0;0;0;1;0],[...
1;1;1;0;0;0;1;1],[...
1;1;1;0;0;1;0;0],[...
1;1;1;0;0;1;0;1],[...
1;1;1;0;0;1;1;0],[...
1;1;1;0;0;1;1;1],[...
1;1;1;0;1;0;0;0],[...
1;1;1;0;1;0;0;1],[...
1;1;1;0;1;0;1;0],[...
1;1;1;0;1;0;1;1],[...
1;1;1;0;1;1;0;0],[...
1;1;1;0;1;1;0;1],[...
1;1;1;0;1;1;1;0],[...
1;1;1;0;1;1;1;1],[...
1;1;1;1;0;0;0;0],[...
1;1;1;1;0;0;0;1],[...
1;1;1;1;0;0;1;0],[...
1;1;1;1;0;0;1;1],[...
1;1;1;1;0;1;0;0],[...
1;1;1;1;0;1;0;1],[...
1;1;1;1;0;1;1;0],[...
1;1;1;1;0;1;1;1],[...
1;1;1;1;1;0;0;0],[...
1;1;1;1;1;0;0;1],[...
1;1;1;1;1;0;1;0],[...
1;1;1;1;1;0;1;1],[...
1;1;1;1;1;1;0;0],[...
1;1;1;1;1;1;0;1],[...
1;1;1;1;1;1;1;0],[...
1;1;1;1;1;1;1;1]])'; 
%% *************************************************************************************************************************************

%% Cuantizacion de Capa Roja

AmpMaxR = max(max(imagen_bocachicaR ));
AmpMinR = min(min(imagen_bocachicaR ));
vectorwowR = AmpMinR:(abs(AmpMinR)+abs(AmpMaxR))/255:AmpMaxR;
vectorR = sort(vectorwowR);
[roswR,coslsR] = sort(vectorR);

clear   j bin  imagen_bocachicaR2 i
binR = 1:length(imagen_bocachicaR);
for j = 1:length(imagen_bocachicaR);
    for i = 1:256-1; % Cantidad de niveles de cuantizacion hasta el ultimo
        if vectorR(i) < imagen_bocachicaR(j) & vectorR(i+1) > imagen_bocachicaR(j)
            % Caso superior al minimo
            imagen_bocachicaR2(j) = vectorR(i+1); % Se cuantiza hacia arriba
        elseif vectorR(i+1) == imagen_bocachicaR(j)
            imagen_bocachicaR2(j) = vectorR(i+1);
            
        end
    end
end

% Transformacion de la imagen en bits

for i = 1:length(imagen_bocachicaR2);
    for j = 1:length(vectorR);
        if imagen_bocachicaR2(i) == vectorR(j);
            ordenR(i) = coslsR(j); 
        end
    end
end
ordenR(ordenR == 0) = 1;
ordenR(ordenR == 256) = 255;
%% Segmentador de Bits ROJOS

clearvars u1R i j orden2R  

i = 1;
orden2R = ordenR;
t = 1;
for i = 1:size(orden2R,2) % DEC correspondiente
        
        u1R(i,1)  =   Todos_los_8bits_tipo3(orden2R(i)+1,1);
        u1R(i,2)=     Todos_los_8bits_tipo3(orden2R(i)+1,2);
        u1R(i,3)=     Todos_los_8bits_tipo3(orden2R(i)+1,3);
        u1R(i,4)=     Todos_los_8bits_tipo3(orden2R(i)+1,4);
        u1R(i,5)=     Todos_los_8bits_tipo3(orden2R(i)+1,5);
        u1R(i,6)=     Todos_los_8bits_tipo3(orden2R(i)+1,6);
        u1R(i,7)=     Todos_los_8bits_tipo3(orden2R(i)+1,7);
        u1R(i,8)=     Todos_los_8bits_tipo3(orden2R(i)+1,8);
end
%% *************************************************************************************************************************************

%% Cuantizacion de Capa Verde

AmpMaxG = max(max(imagen_bocachicaG ));
AmpMinG = min(min(imagen_bocachicaG ));
vectorwowG = AmpMinG:(abs(AmpMinG)+abs(AmpMaxG))/255:AmpMaxG;
vectorG = sort(vectorwowG);
[roswG,coslsG] = sort(vectorG);

clear   j bin  imagen_bocachicaG2 i
binG = 1:length(imagen_bocachicaG);
for j = 1:length(imagen_bocachicaG);
    for i = 1:256-1; % Cantidad de niveles de cuantizacion hasta el ultimo
        if vectorG(i) < imagen_bocachicaG(j) & vectorG(i+1) > imagen_bocachicaG(j)
            % Caso superior al minimo
            imagen_bocachicaG2(j) = vectorG(i+1); % Se cuantiza hacia arriba
        elseif vectorG(i+1) == imagen_bocachicaG(j)
            imagen_bocachicaG2(j) = vectorG(i+1);
            
        end
    end
end

% Transformacion de la imagen en bits

for i = 1:length(imagen_bocachicaG2);
    for j = 1:length(vectorG);
        if imagen_bocachicaG2(i) == vectorG(j);
            ordenG(i) = coslsG(j); 
        end
    end
end
ordenG(ordenG == 0) = 1;
ordenG(ordenG == 256) = 255;
%% Segmentador de Bits VERDE

clearvars u1G i j orden2G  

i = 1;
orden2G = ordenG;
t = 1;
for i = 1:size(orden2G,2) % DEC correspondiente
        
        u1G(i,1)  =   Todos_los_8bits_tipo3(orden2G(i)+1,1);
        u1G(i,2)=     Todos_los_8bits_tipo3(orden2G(i)+1,2);
        u1G(i,3)=     Todos_los_8bits_tipo3(orden2G(i)+1,3);
        u1G(i,4)=     Todos_los_8bits_tipo3(orden2G(i)+1,4);
        u1G(i,5)=     Todos_los_8bits_tipo3(orden2G(i)+1,5);
        u1G(i,6)=     Todos_los_8bits_tipo3(orden2G(i)+1,6);
        u1G(i,7)=     Todos_los_8bits_tipo3(orden2G(i)+1,7);
        u1G(i,8)=     Todos_los_8bits_tipo3(orden2G(i)+1,8);
end
%% *************************************************************************************************************************************

%% Cuantizacion de Capa Azul : 
AmpMaxB = max(max(imagen_bocachicaB ));
AmpMinB = min(min(imagen_bocachicaB ));
vectorwowB = AmpMinB:(abs(AmpMinB)+abs(AmpMaxB))/255:AmpMaxB;
vectorB = sort(vectorwowB);
[roswB,coslsB] = sort(vectorB);

clear   j bin  imagen_bocachicaB2 i
binB = 1:length(imagen_bocachicaB);
for j = 1:length(imagen_bocachicaB);
    for i = 1:256-1; % Cantidad de niveles de cuantizacion hasta el ultimo
        if vectorB(i) < imagen_bocachicaB(j) & vectorB(i+1) > imagen_bocachicaB(j)
            % Caso superior al minimo
            imagen_bocachicaB2(j) = vectorB(i+1); % Se cuantiza hacia arriba
        elseif vectorB(i+1) == imagen_bocachicaB(j)
            imagen_bocachicaB2(j) = vectorB(i+1);
            
        end
    end
end
% Transformacion de la imagen en bits

for i = 1:length(imagen_bocachicaB2);
    for j = 1:length(vectorB);
        if imagen_bocachicaB2(i) == vectorB(j);
            ordenB(i) = coslsB(j); 
        end
    end
end
ordenB(ordenB == 0) = 1;
ordenB(ordenB == 256) = 255;
%% Segmentador de Bits AZUL

clearvars u1B i j orden2B  

i = 1;
orden2B = ordenB;
t = 1;
for i = 1:size(orden2B,2) % DEC correspondiente
        
        u1B(i,1)  =   Todos_los_8bits_tipo3(orden2B(i)+1,1);
        u1B(i,2)=     Todos_los_8bits_tipo3(orden2B(i)+1,2);
        u1B(i,3)=     Todos_los_8bits_tipo3(orden2B(i)+1,3);
        u1B(i,4)=     Todos_los_8bits_tipo3(orden2B(i)+1,4);
        u1B(i,5)=     Todos_los_8bits_tipo3(orden2B(i)+1,5);
        u1B(i,6)=     Todos_los_8bits_tipo3(orden2B(i)+1,6);
        u1B(i,7)=     Todos_los_8bits_tipo3(orden2B(i)+1,7);
        u1B(i,8)=     Todos_los_8bits_tipo3(orden2B(i)+1,8);
end
%% *************************************************************************************************************************************
%% LA IMAGEN ENTRA AL BLOQUE DE SIMULINK
%% Salida del Bloque
IR8PSKR = reshape(IRS8PSK1R(1:end-1),LAT,LONG) ;
IR8PSKG = reshape(IRS8PSK1G(1:end-1),LAT,LONG) ;
IR8PSKB = reshape(IRS8PSK1B(1:end-1),LAT,LONG) ;

%% Importando la imagen al modelo
% Se opera el sampling time 
clearvars ts i ts2
% Se tienen 420800 muestras... se busca enviar todas en 1 segundo
% 1/420800

Fs = 420800
NyquistFs = 2*Fs;
NyquistTs =  5 /NyquistFs;
NyquistTimeInterval = (1:NyquistTs:5);

contador = (1:420800)';
Imagen_REntrada = [contador u1R];
Imagen_GEntrada = [contador imagen_bocachicaG];
Imagen_BEntrada = [contador imagen_bocachicaB];



%% Salidas de Bloque para capas Verde y Azul
IGS = (reshape(Imagen_REntrada(:,2),LAT,LONG)) ;
IBS = (reshape(Imagen_REntrada(:,2),LAT,LONG)) ;









